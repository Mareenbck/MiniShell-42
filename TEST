PARSE QUOTES

#include "../minishell.h"

int	count_d_quotes(t_cmd *cmd)
{
	int	i;
	int	j;
	int	count;

	count = 0;
	i = 0;
	j = 0;
	while (cmd->val[i])
	{
		j = 0;
		while (cmd->val[i][j])
		{
			if (is_doble_quotes(cmd->val[i][j]))
				count++;
			j++;
		}
		i++;
	}
	return (count);
}

int	count_s_quotes(t_cmd *cmd)
{
	int	i;
	int	j;
	int	count;

	count = 0;
	i = 0;
	j = 0;
	while (cmd->val[i])
	{
		j = 0;
		while (cmd->val[i][j])
		{
			if (is_simple_quotes(cmd->val[i][j]))
				count++;
			j++;
		}
		i++;
	}
	return (count);
}

int	start_with_simple(char *cmd)
{
	// int	i;

	// i = 0;
	// while (cmd->val[i])
	// {
	if (cmd[0] == '\'')
		return (1);
	else
		return (0);
		// i++;
	// }
}

int	start_with_dobles(char *cmd)
{
	// int	i;

	// i = 0;
	// while (cmd->val[i])
	// {
	// 	if (cmd->val[i][0] == '\"')
	// 		return (1);
	// 	i++;
	// }
	// return (0);

	if (cmd[0] == '\"')
		return (1);
	else
		return (0);
}

int	start_with_dollar(t_cmd *cmd)
{
	int	i;
	int	j;

	i = 0;
	while (cmd->val[i])
	{
		j = 0;
		if (cmd->val[i][j] == '$')
			return (1);
		i++;
	}
	return (0);
}


PARSE BIS

#include "../minishell.h"

void	check_if_expand(char *str, int i, t_cmd *cmd)
{
	if (str[0] == '$' && str[1] != '\0' && str[1] != '\"')
		cmd->expand[i] = 1;
	else
		cmd->expand[i] = 0;
}

char	*new_string(char *str, char c)
{
	char	*s;
	int		i;
	int		j;

	i = 0;
	j = 0;
	s = malloc(sizeof(char) * (ft_strlen(str) + 1));
	if (!s)
		return (NULL);
	while (str[i])
	{
		if (str[i] == c)
			i++;
		else
			s[j++] = str[i++];
	}
	s[j] = '\0';
	free(str);
	return (s);
}

// void	delete_quotes(t_cmd *cmd, int i, int j)
// {
// 	char	*tmp;

// 	printf("cmd : %c\n", cmd->val[i][j]);
// 	if (is_simple_quotes(cmd->val[i][j]))
// 	{
// 		// if (is_empty_string(cmd->val[i]))
// 		// 	cmd->val[i] = ft_strdup("");
// 		// tmp = ft_strtrim(cmd->val[i], "\'\"");
// 		// free(tmp);
// 		// tmp = ft_strtrim(cmd->val[i], "\"");
// 		// printf("TMP : %s, cmd->val : %s\n", tmp, cmd->val[i]);
// 		// free(cmd->val[i]);
// 		cmd->val[i] = new_string(cmd->val[i], '\'');
// 	}
// 	else if (is_doble_quotes(cmd->val[i][j]))
// 	{
// 		if (is_empty_string(cmd->val[i]))
// 			cmd->val[i] = ft_strdup("");
// 		tmp = ft_strtrim(cmd->val[i], "\"\'");
// 		check_if_expand(tmp, i, cmd);
// 		if (!cmd->expand[i])
// 		{
// 			if (cmd->val[i][0] == '$')
// 			{
// 				free(cmd->val[i]);
// 				cmd->val[i] = new_string(tmp, '\"');
// 				cmd->val[i] = new_string(cmd->val[i], '$');
// 			}
// 			else
// 			{
// 				free(cmd->val[i]);
// 				cmd->val[i] = new_string(tmp, '\"');
// 			}
// 		}
// 		else
// 			free(tmp);
// 	}
// }

void	delete_quotes_bis(t_cmd *cmd, int i)
{
	char	*tmp;

	// printf("cmd->val : %s, i = :%d\n",cmd->val[i], i);
	if (start_with_simple(cmd->val[i]))
	{
		if (is_empty_string(cmd->val[i]))
			cmd->val[i] = ft_strdup("");
		tmp = ft_strtrim(cmd->val[i], "\'\"");
		// free(tmp);
		// tmp = ft_strtrim(cmd->val[i], "\"");
		free(cmd->val[i]);
		cmd->val[i] = new_string(tmp, '\'');
	}
	else if (start_with_dobles(cmd->val[i]))
	{
		if (is_empty_string(cmd->val[i]))
			cmd->val[i] = ft_strdup("");
		tmp = ft_strtrim(cmd->val[i], "\"\'");
		check_if_expand(tmp, i, cmd);
		if (!cmd->expand[i])
		{
			free(cmd->val[i]);
			cmd->val[i] = new_string(tmp, '\"');
			// free(tmp);
		}
		else
			free(tmp);
	}
}


PARSE TER

#include "../minishell.h"

int	is_empty_string(char *str)
{
	if (is_doble_quotes(str[0])
		&& is_doble_quotes(str[1]) && ft_isspace(str[2]))
		return (1);
	else if (is_simple_quotes(str[0])
		&& is_simple_quotes(str[1]) && ft_isspace(str[2]))
		return (1);
	else
		return (0);
}

int	error_quotes(t_cmd *cmd)
{
	int	countd;
	int	counts;

	countd = count_d_quotes(cmd);
	counts = count_s_quotes(cmd);
	if (counts % 2 != 0 && countd % 2 == 0 && countd >= 2)
		return (0);
	if (countd % 2 != 0 && counts % 2 == 0 && counts >= 2)
		return (0);
	if (countd % 2 != 0)
		return (1);
	else if (counts % 2 != 0)
		return (1);
	return (0);
}

void	dispatch_parsing(t_cmd *cmd)
{
	int	i;
	// int	j;

	i = 0;
	while (cmd->val[i])
	{
		// j = 0;
		// while (cmd->val[i][j])
		// {
			if (start_with_simple(cmd->val[i]) || start_with_dobles(cmd->val[i]))
			{
				delete_quotes_bis(cmd, i);
				break ;
			}
			else if (ft_strchr(cmd->val[i], '\''))
				cmd->val[i] = new_string(cmd->val[i], '\'');
			else if (ft_strchr(cmd->val[i], '\"'))
				cmd->val[i] = new_string(cmd->val[i], '\"');
				// delete_quotes(cmd, i, j);
			// j++;
		// }
		i++;
	}
}

int	last_call_quotes(t_cmd *cmd, t_token *token, t_global *global)
{
	(void)token;
	if (error_quotes(cmd) == 1)
	{
		ft_error("Syntax error", 2);
		ft_lst_clear(&global->head, free);
		ft_lst_clear2(&global->headcmd, free);
		return (1);
	}
	else
		dispatch_parsing(cmd);
	return (0);
}

